"use strict";(self.webpackChunkreihan=self.webpackChunkreihan||[]).push([[663],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(t),d=r,f=u["".concat(c,".").concat(d)]||u[d]||h[d]||o;return t?a.createElement(f,l(l({ref:n},p),{},{components:t})):a.createElement(f,l({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3691:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const o={sidebarDepth:4},l=void 0,i={unversionedId:"php",id:"php",title:"php",description:"The notes I took in college, now PHP is dead",source:"@site/docs/php.mdx",sourceDirName:".",slug:"/php",permalink:"/docs/php",draft:!1,editUrl:"https://github.com/reihanboo/reihanboo.github.io/tree/main/packages/create-docusaurus/templates/shared/docs/php.mdx",tags:[],version:"current",frontMatter:{sidebarDepth:4},sidebar:"tutorialSidebar",previous:{title:"\u6742\u9879",permalink:"/docs/javascript/\u6742\u9879"}},c={},s=[],p={toc:s},u="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"NO ITS NOT!!",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"The notes I took in college, now PHP is dead")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"single and double quotes")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n$value = 'abc'.\necho 'The value of the variable is $value'; // output abc\necho 'The value of the variable is $value'; // output $value\necho 'The value of the variable is '. $value; // output abc\n? >\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"array")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'$arr = array(\'a\', \'b\', \'c\').\n$arr1 = array("a"=>"aaa", "b"=>"bbb", "c"=>"ccc").\n\necho implode(\'=\', $arr); // a=b=c\necho $arr1[1]; // bbb\n\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"classes")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"// Functions that begin with two underscores are often called magic methods and include __construct, __destruct, __call.\n// __callStatic, __get, __set, __inset, __unset, __sleep, __wakeup, __clone, etc.\nclass People {\n    var $id; // can use public/protected/private\n    var $name.\n    \n    private $n.\n    \n    // Construct function\n    function __construct($id, $name, $n) {\n        $this->id = $id.\n        $this->name = $name.\n        $this->n = $n.\n    }\n    \n    // destructor\n    function __destruct() {\n        \n    }\n    \n    // Used with clone\n    function __clone() {\n        echo \"clone function\"\n    }\n    \n    // When the instance calls a method, if it can't find the method, it calls the function\n    function __call($name, $arguments) {\n        echo 'call function'.\n    }\n    // In addition to that there is __callStatic, which corresponds to a class method\n    // BTW, People::Fn when calling a class function from outside the class, Self::Fn when calling from inside the class\n    static function __callStatic($name, $arguments) {\n        echo \"$name\".implode(',', $arguments).\n    }\n    \n    // When you get the value of $p->n, you can't actually access the value of the property because it's private.\n    // The __get function is called automatically at this point\n    function __get($property) {\n        echo $this->$property.\n    }\n    \n    // When you change the value of $p->n, you can't actually change the value of the property because it's private.\n    // The __set function will be called automatically at this point\n    function __set($property, $value) {\n        $this->$property = $value.\n    }\n    \n    \n    function getInfo() {\n        echo $this->id.'No. is'. $this->name.\n    }\n}\n\n$p = new People(1, 'reihan').\n$p->getInfo().\n\n$p->test(); // can't find it, so call __call function\n\necho $p->n; // call the __get function\n$p->n = 1; // call __set function\n\n$s = clone $p; // call __clone function\n\n\n\n$data = serialize($arr); // serialize\necho $data.\nunserialize($data); // deserialize\n\n// When the serialize function is called, it first looks for __sleep in the class, and if so, it is called and then serialized\n// Similarly, when calling unserialize, look for __wakeup, and call it before deserializing.\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PHP connection to database")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n    $link = mysqli_connect('localhost:3308', 'root', '').\n    mysqli_select_db($link, 'test').\n    $sql = \"SELECT * FROM comments\".\n    $result = mysqli_query($link, $sql).\n    if (mysqli_num_rows($result) > 0) {\n        while ($row = mysqli_fetch_assoc($result)) {\n\n        }\n    }\n\n    mysqli_close($link)\n? >\n")))}h.isMDXComponent=!0}}]);